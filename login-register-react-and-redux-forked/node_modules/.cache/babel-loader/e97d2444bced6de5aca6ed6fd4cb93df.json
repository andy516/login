{"ast":null,"code":"import _toConsumableArray from \"/Users/user01/Desktop/login-register-react-and-redux-forked/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _objectSpread from \"/Users/user01/Desktop/login-register-react-and-redux-forked/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport * as actionTypes from \"../actions/types\";\nimport { combineReducers } from \"redux\";\nvar initialState = {\n  user: false,\n  storedUsers: [{\n    username: \"demo\",\n    email: \"test123@test.com\",\n    password: \"demo\"\n  }, {\n    username: \"1\",\n    email: \"test321@test.com\",\n    password: \"1\"\n  }]\n};\n\nfunction user_Reducer() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case actionTypes.SET_USER:\n      return _objectSpread({}, state, {\n        user: action.payload\n      });\n\n    case actionTypes.ADD_USER:\n      return _objectSpread({}, state, {\n        storedUsers: [].concat(_toConsumableArray(state.storedUsers), [action.payload])\n      });\n\n    default:\n      return state;\n  }\n}\n\nvar rootReducer = combineReducers({\n  user: user_Reducer\n});\nexport default rootReducer;","map":{"version":3,"sources":["/Users/user01/Desktop/login-register-react-and-redux-forked/src/reducers/index.js"],"names":["actionTypes","combineReducers","initialState","user","storedUsers","username","email","password","user_Reducer","state","action","type","SET_USER","payload","ADD_USER","rootReducer"],"mappings":";;AAAA,OAAO,KAAKA,WAAZ,MAA6B,kBAA7B;AACA,SAASC,eAAT,QAAgC,OAAhC;AAEA,IAAMC,YAAY,GAAG;AACnBC,EAAAA,IAAI,EAAE,KADa;AAEnBC,EAAAA,WAAW,EAAE,CACX;AACEC,IAAAA,QAAQ,EAAE,MADZ;AAEEC,IAAAA,KAAK,EAAE,kBAFT;AAGEC,IAAAA,QAAQ,EAAE;AAHZ,GADW,EAMX;AACEF,IAAAA,QAAQ,EAAE,GADZ;AAEEC,IAAAA,KAAK,EAAE,kBAFT;AAGEC,IAAAA,QAAQ,EAAE;AAHZ,GANW;AAFM,CAArB;;AAgBA,SAASC,YAAT,GAAoD;AAAA,MAA9BC,KAA8B,uEAAtBP,YAAsB;AAAA,MAARQ,MAAQ;;AAClD,UAAQA,MAAM,CAACC,IAAf;AACE,SAAKX,WAAW,CAACY,QAAjB;AACE,+BAAYH,KAAZ;AAAmBN,QAAAA,IAAI,EAAEO,MAAM,CAACG;AAAhC;;AACF,SAAKb,WAAW,CAACc,QAAjB;AACE,+BAAYL,KAAZ;AAAmBL,QAAAA,WAAW,+BAAMK,KAAK,CAACL,WAAZ,IAAyBM,MAAM,CAACG,OAAhC;AAA9B;;AACF;AACE,aAAOJ,KAAP;AANJ;AAQD;;AAED,IAAMM,WAAW,GAAGd,eAAe,CAAC;AAClCE,EAAAA,IAAI,EAAEK;AAD4B,CAAD,CAAnC;AAIA,eAAeO,WAAf","sourcesContent":["import * as actionTypes from \"../actions/types\";\r\nimport { combineReducers } from \"redux\";\r\n\r\nconst initialState = {\r\n  user: false,\r\n  storedUsers: [\r\n    {\r\n      username: \"demo\",\r\n      email: \"test123@test.com\",\r\n      password: \"demo\"\r\n    },\r\n    {\r\n      username: \"1\",\r\n      email: \"test321@test.com\",\r\n      password: \"1\"\r\n    }\r\n  ]\r\n};\r\n\r\nfunction user_Reducer(state = initialState, action) {\r\n  switch (action.type) {\r\n    case actionTypes.SET_USER:\r\n      return { ...state, user: action.payload };\r\n    case actionTypes.ADD_USER:\r\n      return { ...state, storedUsers: [...state.storedUsers, action.payload] };\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n\r\nconst rootReducer = combineReducers({\r\n  user: user_Reducer\r\n});\r\n\r\nexport default rootReducer;\r\n"]},"metadata":{},"sourceType":"module"}